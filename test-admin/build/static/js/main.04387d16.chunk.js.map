{"version":3,"sources":["dataProvider.js","env.js","authProvider.js","videos.js","App.js","serviceWorker.js","index.js"],"names":["dataProvider","type","resource","params","fetchJson","fetchUtils","_convertDataProviderR","console","log","GET_LIST","url","concat","GET_ONE","id","GET_MANY","query","filter","JSON","stringify","ids","GET_MANY_REFERENCE","_params$pagination","pagination","page","perPage","_params$sort","sort","field","order","range","Object","objectSpread","defineProperty","target","UPDATE","options","method","body","data","CREATE","DELETE","Error","convertDataProviderRequestToHTTP","then","response","headers","json","map","x","total","convertHTTPResponseToDataProvider","authProvider","AUTH_LOGIN","AUTH_LOGOUT","AUTH_ERROR","AUTH_CHECK","localStorage","getItem","Promise","resolve","reject","username","password","request","Request","Headers","Content-Type","fetch","status","statusText","_ref","token","setItem","removeItem","PostTitle","record","react_default","a","createElement","VideosList","props","List","Datagrid","rowClick","TextField","source","VideoEdit","Edit","assign","title","videos_PostTitle","SimpleForm","TextInput","multiline","VideoPost","Create","App","Admin","Resource","name","list","create","edit","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.04387d16.chunk.js","sourcesContent":["// in src/dataProvider\r\nimport {\r\n    GET_LIST,\r\n    GET_ONE,\r\n    GET_MANY,\r\n    GET_MANY_REFERENCE,\r\n    CREATE,\r\n    UPDATE,\r\n    DELETE,\r\n    fetchUtils,\r\n} from 'react-admin';\r\nimport { stringify } from 'query-string';\r\n\r\nimport { API_URL } from \"./env\"\r\n/**\r\n * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\r\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n * @param {Object} params The Data Provider request params, depending on the type\r\n * @returns {Object} { url, options } The HTTP request parameters\r\n */\r\nconst convertDataProviderRequestToHTTP = (type, resource, params) => {\r\n    console.log(type, resource, params)\r\n    switch (type) {\r\n    case GET_LIST: {\r\n\r\n        return { url: `${API_URL}/${resource}` };\r\n    }\r\n    case GET_ONE:\r\n        return { url: `${API_URL}/${resource}/${params.id}` };\r\n    case GET_MANY: {\r\n        const query = {\r\n            filter: JSON.stringify({ id: params.ids })\r\n        };\r\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\r\n    }\r\n    case GET_MANY_REFERENCE: {\r\n        const { page, perPage } = params.pagination;\r\n        const { field, order } = params.sort;\r\n        const query = {\r\n            sort: JSON.stringify([field, order]),\r\n            range: JSON.stringify([(page - 1) * perPage, (page * perPage) - 1]),\r\n            filter: JSON.stringify({ ...params.filter, [params.target]: params.id }),\r\n        };\r\n        return { url: `${API_URL}/${resource}?${stringify(query)}` };\r\n    }\r\n    case UPDATE:\r\n        return {\r\n            url: `${API_URL}/${resource}/${params.id}`,\r\n            options: { method: 'PUT', body: JSON.stringify(params.data) },\r\n        };\r\n    case CREATE:\r\n        return {\r\n            url: `${API_URL}/${resource}`,\r\n            options: { method: 'POST', body: JSON.stringify(params.data) },\r\n        };\r\n    case DELETE:\r\n        return {\r\n            url: `${API_URL}/${resource}/${params.id}`,\r\n            options: { method: 'DELETE' },\r\n        };\r\n    default:\r\n        throw new Error(`Unsupported fetch action type ${type}`);\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Object} response HTTP response from fetch()\r\n * @param {String} type One of the constants appearing at the top if this file, e.g. 'UPDATE'\r\n * @param {String} resource Name of the resource to fetch, e.g. 'posts'\r\n * @param {Object} params The Data Provider request params, depending on the type\r\n * @returns {Object} Data Provider response\r\n */\r\nconst convertHTTPResponseToDataProvider = (response, type, resource, params) => {\r\n    const { headers, json } = response;\r\n    console.log(json, headers)\r\n    switch (type) {\r\n    case GET_LIST:\r\n        return {\r\n            data: json.map(x => x),\r\n            total: 1 // ? the number of pages\r\n        };\r\n    case CREATE:\r\n        return { data: { ...params.data, id: json.id } };\r\n    default:\r\n        return { data: json };\r\n    }\r\n};\r\n\r\n/**\r\n * @param {string} type Request type, e.g GET_LIST\r\n * @param {string} resource Resource name, e.g. \"posts\"\r\n * @param {Object} payload Request parameters. Depends on the request type\r\n * @returns {Promise} the Promise for response\r\n */\r\nexport default (type, resource, params) => {\r\n    const { fetchJson } = fetchUtils;\r\n    const { url, options } = convertDataProviderRequestToHTTP(type, resource, params);\r\n    return fetchJson(url, options)\r\n        .then(response => convertHTTPResponseToDataProvider(response, type, resource, params));\r\n};","// export const API_URL = \"http://localhost:4000/api\"\r\nexport const API_URL = \"/api\"","import { AUTH_LOGIN, AUTH_LOGOUT, AUTH_ERROR, AUTH_CHECK } from 'react-admin';\r\nimport { API_URL } from \"./env\"\r\n\r\nexport default (type, params) => {\r\n    if (type === AUTH_LOGIN) {\r\n        console.log(AUTH_LOGIN)\r\n        // ...\r\n    }\r\n    if (type === AUTH_LOGOUT) {\r\n        console.log(AUTH_LOGOUT)\r\n\r\n    }\r\n    if (type === AUTH_ERROR) {\r\n        console.log(AUTH_ERROR)\r\n    }\r\n    if (type === AUTH_CHECK) {\r\n        return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\r\n    }\r\n    if (type === AUTH_LOGIN) {\r\n        const { username, password } = params;\r\n        const request = new Request(`${API_URL}/login`, {\r\n            method: 'POST',\r\n            body: JSON.stringify({ username, password }),\r\n            headers: new Headers({ 'Content-Type': 'application/json' }),\r\n        })\r\n        return fetch(request)\r\n            .then(response => {\r\n                if (response.status < 200 || response.status >= 300) {\r\n                    throw new Error(response.statusText);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(({ token }) => {\r\n                localStorage.setItem('token', token);\r\n            });\r\n    }\r\n\r\n    if (type === AUTH_LOGOUT) {\r\n        localStorage.removeItem('token');\r\n        return Promise.resolve();\r\n    }\r\n}","import React from 'react';\r\nimport { List, Create, DateInput, Edit, SimpleForm, TextInput, Datagrid, TextField } from 'react-admin';\r\n\r\nconst PostTitle = ({ record }) => {\r\n    return <span>Post {record ? `\"${record.id}\"` : ''}</span>;\r\n};\r\n\r\nexport const VideosList = props => (\r\n    <List {...props}>\r\n        <Datagrid rowClick=\"edit\">\r\n            <TextField source=\"id\" />\r\n            <TextField source=\"description\"/>\r\n            <TextField source=\"url\" />\r\n        </Datagrid>\r\n    </List>\r\n);\r\n\r\nexport const VideoEdit = (props) => (\r\n    <Edit title={<PostTitle />} {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"description\" options={{ multiline: true }}/>\r\n            <TextInput source=\"url\" />\r\n        </SimpleForm>\r\n    </Edit>\r\n);\r\n\r\nexport const VideoPost = (props) => (\r\n    <Create {...props}>\r\n        <SimpleForm>\r\n            <TextInput source=\"description\" />\r\n            <TextInput source=\"url\" options={{ multiline: true }} />\r\n        </SimpleForm>\r\n    </Create>\r\n);","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\n\nimport { VideosList, VideoEdit, VideoPost } from \"./videos\"\n\nconst App = () => (\n    <Admin dataProvider={dataProvider} authProvider={authProvider}>\n        <Resource name=\"videos\" list={VideosList} create={VideoPost} edit={VideoEdit} />\n    </Admin>\n)\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}